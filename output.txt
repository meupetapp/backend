Project Path: /home/arreguy/Projects/backend

Source Tree:

```
backend
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ dist
‚îÇ   ‚îú‚îÄ‚îÄ controllers
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ homeController.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ userController.js
‚îÇ   ‚îú‚îÄ‚îÄ index.js
‚îÇ   ‚îú‚îÄ‚îÄ models
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ userModel.js
‚îÇ   ‚îú‚îÄ‚îÄ routes
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îÇ   ‚îî‚îÄ‚îÄ services
‚îÇ       ‚îî‚îÄ‚îÄ userService.js
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ controllers
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ homeController.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ petController.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ userController.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ userPermissionController.ts
‚îÇ   ‚îú‚îÄ‚îÄ index.ts
‚îÇ   ‚îú‚îÄ‚îÄ models
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ petModel.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ userModel.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ userPermissionModel.ts
‚îÇ   ‚îú‚îÄ‚îÄ routes
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îÇ   ‚îú‚îÄ‚îÄ services
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ petService.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ userPermissionService.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ userService.ts
‚îÇ   ‚îî‚îÄ‚îÄ types
‚îÇ       ‚îú‚îÄ‚îÄ Activity.ts
‚îÇ       ‚îú‚îÄ‚îÄ Note.ts
‚îÇ       ‚îî‚îÄ‚îÄ UserPermission.ts
‚îî‚îÄ‚îÄ tsconfig.json

```

`/home/arreguy/Projects/backend/README.md`:

```````md
# Meu Pet - Backend
Este √© o reposit√≥rio do backend da aplica√ß√£o Meu Pet, um sistema que permite a gest√£o colaborativa de informa√ß√µes sobre os cuidados e rotinas de pets, facilitando o compartilhamento de dados entre membros da fam√≠lia e profissionais, como veterin√°rios.

### Funcionalidades

### Tecnologias Utilizadas
- Fastify: Framework para cria√ß√£o da API.
- MongoDB: Banco de dados NoSQL para armazenar dados dos usu√°rios, pets e atividades.

### Pr√©-requisitos
- Node.js (v16.x ou superior)
- MongoDB (Local ou em nuvem)
- NPM ou Yarn

## Instala√ß√£o
1. Clone o reposit√≥rio:
```yaml I'm A tab
git clone https://github.com/meupetapp/backend.git
```
2. Instale as depend√™ncias:
```yaml 
npm install
# ou
yarn install
```
3. Crie um arquivo .env na raiz do projeto com as seguintes vari√°veis de ambiente:
```yaml 
PORT=3000
MONGODB_URI=mongodb://localhost:27017/carteira-de-pets
JWT_SECRET=sua-chave-secreta-jwt
```
4. Inicie o servidor:
```yaml 
npm run dev
# ou
yarn dev
```

## Estrutura de pastas
```
üì¶ meu-pet-backend
 ‚î£ üìÇsrc
 ‚îÉ ‚î£ üìÇcontrollers      # L√≥gica dos endpoints da API
 ‚îÉ ‚î£ üìÇmodels           # Modelos Mongoose para o MongoDB
 ‚îÉ ‚î£ üìÇroutes           # Defini√ß√£o das rotas da API
 ‚îÉ ‚î£ üìÇmiddlewares      # Middlewares (autentica√ß√£o, valida√ß√µes, etc.)
 ‚îÉ ‚îó üìÇservices         # Servi√ßos de regras de neg√≥cio
 ‚î£ üìú.env.example       # Exemplo do arquivo .env
 ‚î£ üìúpackage.json       # Configura√ß√µes do projeto e depend√™ncias
 ‚îó üìúREADME.md          # Informa√ß√µes do projeto
```
```````

`/home/arreguy/Projects/backend/dist/controllers/homeController.js`:

```````js
export const getHomePage = async (request, reply) => {
    const imgUrl = 'https://i.imgur.com/fT1jEyc.jpeg';
    const htmlContent = `
    <!DOCTYPE html>
    <html lang="pt-br">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Cadastro e Login</title>
        <style>
            body {
                font-family: 'Arial', sans-serif;
                background-color: #f0f2f5;
                color: #333;
                margin: 0;
                padding: 0;
                display: flex;
                background-position: center;
                background-image: url('${imgUrl}');
                background-repeat: no-repeat;
                background-size: cover;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
            }
            
            .container {
                background: white;
                border-radius: 15px;
                padding: 40px;
                max-width: 350px;
                text-align: center;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }

            .container h2 {
                font-size: 24px;
                margin-bottom: 20px;
                color: ##00cc73;
            }

            input {
                width: calc(100% - 20px);
                padding: 10px;
                margin: 8px 0;
                border-radius: 5px;
                border: 1px solid #ddd;
                outline: none;
                box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
            }

            button {
                width: 100%;
                padding: 12px;
                background-color: #00cc73; 
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                transition: background-color 0.3s ease;
                margin-top: 10px;
                font-size: 16px;
            }

            button:hover {
                background-color: #008f7a;
            }

            .divider {
                margin: 20px 0;
                font-size: 14px;
                color: #777;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h2>Cadastro</h2>
            <form id="registerForm">
                <input type="text" id="username" placeholder="Nome de Usu√°rio" required>
                <input type="email" id="email" placeholder="Email" required>
                <input type="password" id="password" placeholder="Senha" required>
                <button type="submit">Cadastrar</button>
            </form>

            <h2>Login</h2>
            <form id="loginForm">
                <input type="email" id="loginEmail" placeholder="Email" required>
                <input type="password" id="loginPassword" placeholder="Senha" required>
                <button type="submit">Entrar</button>
            </form>
        </div>

        <script>
            // Manipula o envio do formul√°rio de cadastro
            document.getElementById('registerForm').addEventListener('submit', async function(event) {
                event.preventDefault(); 

                const username = document.getElementById('username').value;
                const email = document.getElementById('email').value;
                const password = document.getElementById('password').value;

                const data = { username, email, password };

                try {
                    const response = await fetch('/register', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        alert('Cadastro realizado com sucesso!');
                    } else {
                        alert('Erro ao realizar cadastro.');
                    }
                } catch (error) {
                    console.error('Erro:', error);
                    alert('Erro ao enviar a requisi√ß√£o.');
                }
            });

            // Manipula o envio do formul√°rio de login
            document.getElementById('loginForm').addEventListener('submit', async function(event) {
                event.preventDefault(); 

                const email = document.getElementById('loginEmail').value;
                const password = document.getElementById('loginPassword').value;

                const data = { email, password };

                try {
                    const response = await fetch('/login', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        alert('Login realizado com sucesso!');
                    } else {
                        alert('Erro ao realizar login.');
                    }
                } catch (error) {
                    console.error('Erro:', error);
                    alert('Erro ao enviar a requisi√ß√£o.');
                }
            });
        </script>
    </body>
    </html>
  `;
    reply.type('text/html').send(htmlContent);
};

```````

`/home/arreguy/Projects/backend/dist/controllers/userController.js`:

```````js
import { registerUser, loginUser } from '../services/userService.js';
export const register = async (req, reply) => {
    try {
        const { username, email, password } = req.body;
        const user = await registerUser(username, email, password);
        reply.code(201).send({ message: 'Registro com sucesso', user });
    }
    catch (error) {
        const err = error;
        reply.code(400).send({ error: err.message });
    }
};
export const login = async (req, reply) => {
    try {
        const { email, password } = req.body;
        const token = await loginUser(email, password);
        reply.send({ message: 'Login com sucesso', token });
    }
    catch (error) {
        const err = error;
        reply.code(400).send({ error: err.message });
    }
};

```````

`/home/arreguy/Projects/backend/dist/index.js`:

```````js
import Fastify from 'fastify';
import dotenv from 'dotenv';
import mongoose from 'mongoose';
import routes from './routes/index.js';
dotenv.config();
const fastify = Fastify({ logger: true });
routes.forEach((route) => fastify.route(route));
mongoose.connect(process.env.MONGO_URI)
    .then(() => console.log('Conectado ao MongoDB'))
    .catch(err => console.log('Erro na conex√£o ao MongoDB', err));
const start = async () => {
    try {
        await fastify.listen({ port: parseInt(process.env.PORT), host: 'localhost' });
        console.log(`Servidor rodando em http://localhost:${process.env.PORT}`);
    }
    catch (err) {
        fastify.log.error(err);
        process.exit(1);
    }
};
start();

```````

`/home/arreguy/Projects/backend/dist/models/userModel.js`:

```````js
import mongoose, { Schema } from 'mongoose';
const UserSchema = new Schema({
    username: { type: String, required: true, unique: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true }
});
export default mongoose.model('User', UserSchema);

```````

`/home/arreguy/Projects/backend/dist/routes/index.js`:

```````js
import { getHomePage } from '../controllers/homeController.js';
import { register, login } from '../controllers/userController.js';
const routes = [
    {
        method: 'GET',
        url: '/',
        handler: getHomePage,
    },
    {
        method: 'POST',
        url: '/register',
        handler: register,
    },
    {
        method: 'POST',
        url: '/login',
        handler: login,
    },
];
export default routes;

```````

`/home/arreguy/Projects/backend/dist/services/userService.js`:

```````js
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import User from '../models/userModel.js';
const JWT_SECRET = process.env.JWT_SECRET || 'jwt_secret';
export const registerUser = async (username, email, password) => {
    const existingUser = await User.findOne({ email });
    if (existingUser) {
        throw new Error('Usu√°rio j√° existe');
    }
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ username, email, password: hashedPassword });
    return newUser.save();
};
export const loginUser = async (email, password) => {
    const user = await User.findOne({ email });
    if (!user) {
        throw new Error('Usu√°rio n√£o encontrado');
    }
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
        throw new Error('Senha inv√°lida');
    }
    const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, { expiresIn: '1h' });
    return token;
};
export const verifyToken = (token) => {
    try {
        return jwt.verify(token, JWT_SECRET);
    }
    catch (error) {
        throw new Error('Token inv√°lido');
    }
};

```````

`/home/arreguy/Projects/backend/package.json`:

```````json
{
  "name": "backend",
  "version": "1.0.0",
  "description": "Backend constru√≠do utilizando Fastify e MongoDB para suportar a aplica√ß√£o Meu Pet.",
  "main": "src/index.ts",
  "type": "module",
  "scripts": {
    "dev": "nodemon --exec tsx src/index.ts",
    "build": "tsc",
    "start": "node dist/index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@fastify/cors": "^8.5.0",
    "bcrypt": "^5.1.1",
    "dotenv": "^16.4.5",
    "fastify": "^4.28.1",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.6.1"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.2",
    "@types/jsonwebtoken": "^9.0.6",
    "@types/node": "^22.5.4",
    "nodemon": "^3.1.4",
    "tsx": "^4.19.1",
    "typescript": "^5.6.2"
  }
}

```````

`/home/arreguy/Projects/backend/src/controllers/homeController.ts`:

```````ts
import { FastifyReply, FastifyRequest } from 'fastify';

export const getHomePage = async (request: FastifyRequest, reply: FastifyReply): Promise<void> => {
  const imgUrl = 'https://i.imgur.com/fT1jEyc.jpeg';

  const htmlContent = `
    <!DOCTYPE html>
    <html lang="pt-br">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Cadastro e Login</title>
        <style>
            body {
                font-family: 'Arial', sans-serif;
                background-color: #f0f2f5;
                color: #333;
                margin: 0;
                padding: 0;
                display: flex;
                background-position: center;
                background-image: url('${imgUrl}');
                background-repeat: no-repeat;
                background-size: cover;
                justify-content: center;
                align-items: center;
                min-height: 100vh;
            }
            
            .container {
                background: white;
                border-radius: 15px;
                padding: 40px;
                max-width: 350px;
                text-align: center;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }

            .container h2 {
                font-size: 24px;
                margin-bottom: 20px;
                color: ##00cc73;
            }

            input {
                width: calc(100% - 20px);
                padding: 10px;
                margin: 8px 0;
                border-radius: 5px;
                border: 1px solid #ddd;
                outline: none;
                box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
            }

            button {
                width: 100%;
                padding: 12px;
                background-color: #00cc73; 
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                transition: background-color 0.3s ease;
                margin-top: 10px;
                font-size: 16px;
            }

            button:hover {
                background-color: #008f7a;
            }

            .divider {
                margin: 20px 0;
                font-size: 14px;
                color: #777;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h2>Cadastro</h2>
            <form id="registerForm">
                <input type="text" id="username" placeholder="Nome de Usu√°rio" required>
                <input type="email" id="email" placeholder="Email" required>
                <input type="password" id="password" placeholder="Senha" required>
                <button type="submit">Cadastrar</button>
            </form>

            <h2>Login</h2>
            <form id="loginForm">
                <input type="email" id="loginEmail" placeholder="Email" required>
                <input type="password" id="loginPassword" placeholder="Senha" required>
                <button type="submit">Entrar</button>
            </form>
        </div>

        <script>
            // Manipula o envio do formul√°rio de cadastro
            document.getElementById('registerForm').addEventListener('submit', async function(event) {
                event.preventDefault(); 

                const username = document.getElementById('username').value;
                const email = document.getElementById('email').value;
                const password = document.getElementById('password').value;

                const data = { username, email, password };

                try {
                    const response = await fetch('/register', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        alert('Cadastro realizado com sucesso!');
                    } else {
                        alert('Erro ao realizar cadastro.');
                    }
                } catch (error) {
                    console.error('Erro:', error);
                    alert('Erro ao enviar a requisi√ß√£o.');
                }
            });

            // Manipula o envio do formul√°rio de login
            document.getElementById('loginForm').addEventListener('submit', async function(event) {
                event.preventDefault(); 

                const email = document.getElementById('loginEmail').value;
                const password = document.getElementById('loginPassword').value;

                const data = { email, password };

                try {
                    const response = await fetch('/login', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        alert('Login realizado com sucesso!');
                    } else {
                        alert('Erro ao realizar login.');
                    }
                } catch (error) {
                    console.error('Erro:', error);
                    alert('Erro ao enviar a requisi√ß√£o.');
                }
            });
        </script>
    </body>
    </html>
  `;

  reply.type('text/html').send(htmlContent);
};

```````

`/home/arreguy/Projects/backend/src/controllers/petController.ts`:

```````ts
import { FastifyReply, FastifyRequest } from "fastify";
import { findUserById, findUserByToken } from "../services/userService";
import { createPet, findByUser, updatePet } from "../services/petService";
import { CreatePetDTO, UpdatePetDTO } from "../models/petModel";
import { checkUserPermission } from "../services/userService";
import Pet from "../models/petModel";

export const create = async (req: FastifyRequest, reply: FastifyReply) => {
  try {
    const pet = req.body as CreatePetDTO;
    const user = await findUserByToken(req.headers.authorization || '');
    if (!user) {
      throw new Error('Usu√°rio n√£o encontrado');
    }
    const createdPet = await createPet(pet, user);
    reply.code(201).send({ message: 'Pet cadastrado com sucesso', createdPet });
  } catch (error) {
    const err = error as Error;
    reply.code(400).send({ error: err.message });
  }
};

export const update = async (req: FastifyRequest, reply: FastifyReply) => {
  try {
    const pet = req.body as UpdatePetDTO;
    const user = await findUserByToken(req.headers.authorization || '');
    if (!user) {
      throw new Error('Usu√°rio n√£o encontrado');
    }
    const createdPet = await updatePet(pet, user);
    reply.code(201).send({ message: 'Pet atualizado com sucesso', createdPet });
  } catch (error) {
    const err = error as Error;
    reply.code(400).send({ error: err.message });
  }
};

export const deletePet = async (req: FastifyRequest, reply: FastifyReply) => {
  try {
    const pet = req.body as UpdatePetDTO;
    const user = await findUserByToken(req.headers.authorization || '');
    if (!user) {
      throw new Error('Usu√°rio n√£o encontrado');
    }
    const createdPet = await updatePet({ ...pet, isEnable: false, }, user);
    reply.code(201).send({ message: 'Pet atualizado com sucesso', createdPet });
  } catch (error) {
    const err = error as Error;
    reply.code(400).send({ error: err.message });
  }
};

export const listByUser = async (req: FastifyRequest, reply: FastifyReply) => {
  try {
    const params = req.params as any;
    const userId = params.userId as string;

    const userById = await findUserById(userId);
    const user = await findUserByToken(req.headers.authorization || '');
    if ((!user && !userById) || user?.email !== userById?.email) {
      throw new Error('Usu√°rio n√£o encontrado');
    }
    const pets = await findByUser(user?.id || '');
    reply.send({ pets });
  } catch (error) {
    const err = error as Error;
    reply.code(400).send({ error: err.message });
  }
};

export const getPetDetails = async (req: FastifyRequest, reply: FastifyReply) => {
  try {
    const petId = (req.params as any).petId;
    const userId = req.headers.authorization; 
    
    if (!userId) {
      return reply.code(401).send({ message: "Usu√°rio n√£o fornecido."});
    }

    // const hasPermission = await checkUserPermission(userId, petId);
    
    // if (!hasPermission) {
    //   return reply.code(403).send({ message: "Voc√™ n√£o tem permiss√£o para acessar esse pet." });
    // }

    const pet = await Pet.findById(petId);
    if (!pet) {
      return reply.code(404).send({ message: "Pet n√£o encontrado." });
    }

    reply.send({ pet });
  } catch (error) {
    reply.code(500).send({ message: "Erro na busca." });
  }
};
```````

`/home/arreguy/Projects/backend/src/controllers/userController.ts`:

```````ts
import { FastifyRequest, FastifyReply } from 'fastify';
import { registerUser, loginUser } from '../services/userService';

export const register = async (req: FastifyRequest, reply: FastifyReply) => {
  try {
    const { username, email, password } = req.body as any;
    const user = await registerUser(username, email, password);
    reply.code(201).send({ message: 'Registro com sucesso', user });
  } catch (error) {
    const err = error as Error;
    reply.code(400).send({ error: err.message });
  }
};

export const login = async (req: FastifyRequest, reply: FastifyReply) => {
  try {
    const { email, password } = req.body as any;
    const res = await loginUser(email, password);
    reply.send({ message: 'Login com sucesso', ...res });
  } catch (error) {
    const err = error as Error;
    reply.code(400).send({ error: err.message });
  }
};

```````

`/home/arreguy/Projects/backend/src/controllers/userPermissionController.ts`:

```````ts
import { FastifyReply, FastifyRequest } from "fastify";
import { createUserPermission } from "../services/userPermissionService";
import { findUserByToken } from "../services/userService";

export const create = async (req: FastifyRequest, reply: FastifyReply) => {
  try {
    const { userId, petId, permissions } = req.body as any;
    const user = await findUserByToken(req.headers.authorization || '');
    if (!user) {
      throw new Error('Usu√°rio n√£o encontrado');
    }
    const userPermission = await createUserPermission(userId, petId, permissions, user.id);
    reply.code(201).send({ message: 'Permiss√£o criada com sucesso', userPermission });
  } catch (error) {
    const err = error as Error;
    reply.code(400).send({ error: err.message });
  }
}
```````

`/home/arreguy/Projects/backend/src/index.ts`:

```````ts
import Fastify, { FastifyInstance, RouteOptions } from 'fastify';
import dotenv from 'dotenv';
import mongoose from 'mongoose';
import routes from './routes/index';
import cors from '@fastify/cors'; 

dotenv.config();

const fastify: FastifyInstance = Fastify({ logger: true });

routes.forEach((route: RouteOptions) => fastify.route(route));

fastify.register(cors, {
  origin: '*'
});

mongoose.connect(process.env.MONGO_URI as string)
  .then(() => console.log('Conectado ao MongoDB'))
  .catch(err => console.log('Erro na conex√£o ao MongoDB', err));

const start = async (): Promise<void> => {
  try {
    await fastify.listen({ port: parseInt(process.env.PORT as string), host: 'localhost' });
    console.log(`Servidor rodando em http://localhost:${process.env.PORT}`);
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};

start();

```````

`/home/arreguy/Projects/backend/src/models/petModel.ts`:

```````ts
import mongoose, { Document, Schema } from "mongoose";

export interface IPet extends Document {
  name: string;
  photo: string;
  species: string;
  breed: string;
  userId: string;
  createdAt: Date;
  updatedAt: Date;
  isAdopted: boolean;
  dateAdoption?: Date;
  birthDate: Date;
}

export interface CreatePetDTO {
  name: string;
  photo: string;
  species: string;
  breed: string;
  isAdopted: boolean;
  dateAdoption?: Date;
  birthDate: Date;
  sex: string;
  color: string;
}

export interface UpdatePetDTO {
  id: string;
  name?: string;
  photo?: string;
  species?: string;
  breed?: string;
  isAdopted?: boolean;
  isEnable?: boolean;
  dateAdoption?: Date;
  birthDate?: Date;
  sex?: string;
  color?: string;
}

const PetSchema: Schema = new Schema({
  name: { type: String, required: true },
  photo: { type: String, required: true },
  species: { type: String, required: true },
  breed: { type: String, required: true },
  userId: { type: String, required: true },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
  isAdopted: { type: Boolean, required: true },
  isEnable: { type: Boolean, default: true },
  dateAdoption: { type: Date },
  birthDate: { type: Date, required: true }
});

export default mongoose.model<IPet>('Pet', PetSchema);
```````

`/home/arreguy/Projects/backend/src/models/userModel.ts`:

```````ts
import mongoose, { Schema, Document } from 'mongoose';

export interface IUser extends Document {
  username: string;
  email: string;
  password: string;
  _id: string;
  id: string;
}

const UserSchema: Schema = new Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true }
});

export default mongoose.model<IUser>('User', UserSchema);

```````

`/home/arreguy/Projects/backend/src/models/userPermissionModel.ts`:

```````ts
import mongoose, { Schema, Document } from "mongoose";

export interface IUserPermission extends Document {
  petId: string;
  userId: string;
  permissions: string[];
  sentAt: Date;
  status: string;
}

const UserPermissionSchema: Schema = new Schema({
  petId: { type: String, required: true },
  userId: { type: String, required: true },
  permissions: { type: [String], required: true },
  sentAt: { type: Date, default: Date.now },
  status: { type: String, default: 'active' },
});

export default mongoose.model<IUserPermission>('UserPermission', UserPermissionSchema);
```````

`/home/arreguy/Projects/backend/src/routes/index.ts`:

```````ts
import { RouteOptions } from 'fastify';
import { getHomePage } from '../controllers/homeController.js';
import { register, login } from '../controllers/userController.js';
import {
  create as createPet,
  deletePet,
  getPetDetails,
  listByUser,
  update as updatePet
} from '../controllers/petController.js';
import { create } from '../controllers/userPermissionController.js';

const routes: RouteOptions[] = [
  {
    method: 'GET',
    url: '/',
    handler: getHomePage,
  },
  {
    method: 'POST',
    url: '/register',
    handler: register,
  },
  {
    method: 'POST',
    url: '/login',
    handler: login,
  },
  {
    method: 'POST',
    url: '/pet',
    handler: createPet
  },
  {
    method: 'PUT',
    url: '/pet',
    handler: updatePet
  },
  {
    method: 'DELETE',
    url: '/pet',
    handler: deletePet
  },
  {
    method: 'GET',
    url: '/user/:userId/pets',
    handler: listByUser
  },
  {
    method: 'GET',
    url: '/pet/:petId',
    handler: getPetDetails
  },
  {
    method: 'POST',
    url: '/permission',
    handler: create
  }
];

export default routes;

```````

`/home/arreguy/Projects/backend/src/services/petService.ts`:

```````ts
import Pet, { CreatePetDTO, IPet, UpdatePetDTO } from "../models/petModel";
import { IUser } from "../models/userModel";

const JWT_SECRET = process.env.JWT_SECRET || 'jwt_secret';

export const createPet = async (pet: CreatePetDTO, user: IUser): Promise<IPet | null> => {
  const newPet = new Pet({ ...pet, userId: user.id || user._id, active: true });
  return newPet.save();
}

export const updatePet = async (pet: UpdatePetDTO, user: IUser): Promise<IPet | null> => {
  try {
    const updatedPet = await Pet.findOneAndUpdate({ _id: pet.id, userId: user.id || user._id }, { ...pet, updatedAt: new Date() }, { new: true });
    return updatedPet;
  } catch (error) {
    throw new Error('Pet n√£o encontrado');
  }
}

export const findByUser = async (userId: string): Promise<IPet[]> => {
  try {
    return Pet.find({ userId });
  } catch (error) {
    console.log('@error', error);
    throw new Error('Pets n√£o encontrados');
  }
}

export const findById = async (id: string): Promise<IPet | null> => {
  try {
    return Pet.findById(id);
  } catch (error) {
    throw new Error('Pet n√£o encontrado');
  }
}

```````

`/home/arreguy/Projects/backend/src/services/userPermissionService.ts`:

```````ts
import UserPermission, { IUserPermission } from "../models/userPermissionModel";
import { findById } from "./petService";

export const createUserPermission = async (userId: string, petId: string, permissions: string[], ownerUserId: string): Promise<IUserPermission | null> => {
  const pet = await findById(petId);
  if (!pet || pet.userId !== ownerUserId) {
    throw new Error('Pet n√£o encontrado');
  }
  const userPermission = new UserPermission({ userId, petId, permissions });
  return userPermission.save();
}

```````

`/home/arreguy/Projects/backend/src/services/userService.ts`:

```````ts
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import User, { IUser } from '../models/userModel';
import UserPermission from "../models/userPermissionModel";
import Pet from "../models/petModel";

const JWT_SECRET = process.env.JWT_SECRET || 'jwt_secret';

export const registerUser = async (username: string, email: string, password: string): Promise<IUser | null> => {
  const existingUser = await User.findOne({ email });
  if (existingUser) {
    throw new Error('Usu√°rio j√° existe');
  }

  const hashedPassword = await bcrypt.hash(password, 10);
  const newUser = new User({ username, email, password: hashedPassword });
  return newUser.save();
};

export const loginUser = async (email: string, password: string): Promise<{ token: string, userId: string } | null> => {
  const user = await User.findOne({ email });
  if (!user) {
    throw new Error('Usu√°rio n√£o encontrado');
  }

  const isPasswordValid = await bcrypt.compare(password, user.password);
  if (!isPasswordValid) {
    throw new Error('Senha inv√°lida');
  }

  const token = jwt.sign({ id: user._id, email: user.email }, JWT_SECRET, { expiresIn: '1h' });
  return { token, userId: user.id };
};

export const findUserByToken = async (token: string): Promise<IUser | null> => {
  try {
    const clearedToken = token.replace('Bearer ', '');
    const { id } = jwt.verify(clearedToken, JWT_SECRET) as any;
    return User.findById(id);
  } catch (error) {
    throw new Error('Usu√°rio n√£o encontrado');
  }
}

export const findUserById = async (id: string): Promise<IUser | null> => {
  try {
    return User.findById(id);
  } catch (error) {
    throw new Error('Usu√°rio n√£o encontrado');
  }
}

export const verifyToken = (token: string): any => {
  try {
    return jwt.verify(token, JWT_SECRET);
  } catch (error) {
    throw new Error('Token inv√°lido');
  }
};

export const checkUserPermission = async (userId: string, petId: string): Promise<boolean> => {
  const isOwner = await Pet.findOne({ _id: petId, userId });

  if (isOwner) return true;

  const hasPermission = await UserPermission.findOne({ userId, petId, status: 'active' });

  return !!hasPermission;
};
```````

`/home/arreguy/Projects/backend/src/types/Activity.ts`:

```````ts
import Note from "./Note";

interface Activity {
  title: string;
  type: string;
  description: string;
  photo: string;
  userId: string;
  createdAt: Date;
  updatedAt: Date;
  notes: Note[];
  createdBy: string;
  time: Date;
}

```````

`/home/arreguy/Projects/backend/src/types/Note.ts`:

```````ts
export default interface Note {
  content: string;
  activityId: string;
  updatedAt: Date;
  createdAt: Date;
}

```````

`/home/arreguy/Projects/backend/src/types/UserPermission.ts`:

```````ts
export default interface UserPermission {
  petId: string;
  userId: string;
  permissions: string[];
  sentAt: Date;
  status: string;
}

```````

`/home/arreguy/Projects/backend/tsconfig.json`:

```````json
{
    "compilerOptions": {
      "target": "ES2020",
      "module": "ESNext",
      "moduleResolution": "Node",
      "strict": true,
      "esModuleInterop": true,
      "skipLibCheck": true,
      "forceConsistentCasingInFileNames": true,
      "outDir": "dist",
      "rootDir": "src",
      "resolveJsonModule": true
    },
    "include": ["src/**/*.ts"],
    "exclude": ["node_modules"]
  }
```````